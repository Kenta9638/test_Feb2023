The Short And Sweet Of It...
============================
Please add this directory to your matlab path.  You must also have 
mexnc on your path in order for snctools to work.

SNCTOOLS is only supported on R14 or higher.


SNCTOOLS Preferences
=======================================================================
USE_JAVA 
    If you have the toolsUI jar file on your javapath, then enabling
	this preference allows the java backend to work.  You may find this
	useful in reading OPeNDAP URLs or netCDF-4 files (see below).  
	
	    setpref('SNCTOOLS','USE_JAVA',true);

	If you wish to use an opendap-enabled version of mexnc, you should
	set this preference to false.

PRESERVE_FVD
	Way back in the old days, when mexnc/mexcdf was the only game
	in town, data was always transposed when reading/writing netCDF
	data thru MATLAB.  The reason for this was seemingly to make the
	data look consistent with the way that the netcdf tools such as
	"ncdump" presented the metadata.  "ncdump" is compiled in C, so
	it is therefore a row-major-order application, whereas MATLAB 
	presents data in column-major order.
	
	Transposing large datasets can be a costly operation, however, and
	it really isn't necessary in all cases.  SNCTOOLS can be told to
	not transpose data by setting the PRESERVE_FVD preference

	>> setpref('SNCTOOLS','PRESERVE_FVD',true);

	By default this preference is false.  If you set it to true,
	you may see a big performance boost for large datasets, but you
	might also end up breaking existing code that expected the data
	to be permuted to row-major order, so you need to be careful
	when using this.


SNCTOOLS and NetCDF-4
=======================================================================
SNCTOOLS supports netCDF-4 files under certain conditions...

If you have R2009a or higher, then you will use the native low-level
HDF5 interface that MATLAB provides.  Nothing special is needed on your
part in order for this to work.

If you have R2008b or below, you can read netCDF-4 files by using 
the java interface.  You will need the toolsUI jar file from Unidata.
Go to http://www.unidata.ucar.edu/software/netcdf-java/ and make sure
you download version 4.0 or higher.  Add the jar file to your MATLAB
path with 

		>> javaaddpath ( '/path/to/toolsUI-4.0.jar' );

You should then set the needed preference to tell SNCTOOLS to default
to java for netCDF-4 files

		>> setpref ( 'SNCTOOLS', 'USE_JAVA', true );

You can also read and write to netCDF-4 classic files (those files that
do not use any advanced netCDF-4 features, like compound or variable-
length datasets) if you >>>> STATICALLY <<< recompile the netcdf-4
and hdf5 libraries and then relink mexnc.  You are on your own if you
try this.  The R2008b MathWorks netCDF support only extends to 3.6.2.

If you do not compile the libraries statically, you will get an invalid
mex-file, as the 1.8.x version of hdf5 will conflict with the 1.6.5
version used by MATLAB.  Please see the instructions for mexnc for 
further details about compiling mexnc.  


=======================================================================
Of all the routines in this m-file collection, the most useful (in my
humble opinion) are as follows
	
	1. nc_varget    - reads a netcdf variable
	2. nc_varput    - writes to a netcdf variable
	3. nc_attget    - reads a netcdf attribute
	4. nc_attput    - writes a netcdf attribute
	5. nc_padheader - pads header section of large netCDF files 
	6. nc_dump      - prints netcdf metadata

There is a subdirectory called "tests" which has routines that test
the m-files of SNCTOOLS.  You really don't need to worry about this
unless you are convinced that there is something wrong with one of
the m-files.  In that case, you can run the test suite by changing
directories into "tests" and running "test_snctools" from the matlab
command line.  
